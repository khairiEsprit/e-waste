package com.example.ewaste.Controllers;

import com.example.ewaste.Entities.Participation;
import com.example.ewaste.Repository.ParticipationRepository;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.Alert;
import javafx.scene.control.Button;
import javafx.scene.control.TextField;
import javafx.stage.Stage;

import java.io.IOException;

public class ParticipationController {

    // FXML elements (form fields)
    @FXML
    private TextField firstNameField;
    @FXML
    private TextField lastNameField;
    @FXML
    private TextField emailField;
    @FXML
    private TextField phoneField;
    @FXML
    private TextField cityField;
    @FXML
    private TextField countryField;
    @FXML
    private TextField zipCodeField;

    @FXML
    private Button submitButton;

    // Create an instance of ParticipationRepository
    private final ParticipationRepository participationRepository = new ParticipationRepository();

    // Handle form submission
    @FXML
    public void handleSubmit() {
        // Retrieve input values from the form
        String firstName = firstNameField.getText();
        String lastName = lastNameField.getText();
        String email = emailField.getText();
        String phone = phoneField.getText();
        String city = cityField.getText();
        String country = countryField.getText();
        String zipCode = zipCodeField.getText();

        // Validate the form (simple checks)
        if (firstName.isEmpty() || lastName.isEmpty() || email.isEmpty()) {
            showAlert("Error", "Please fill in all required fields.");
            return;
        }

        // Vérifier si une participation avec le même e-mail existe déjà
        if (participationRepository.isParticipationExists(email)) {
            showAlert("Error", "Une participation avec cet e-mail existe déjà.");
            return;
        }

        // Create a Participation object
        Participation participation = new Participation(
                0,  // ID is set to 0 since it will be auto-generated by the DB
                firstName,
                lastName,
                email,
                phone,
                city,
                country,
                zipCode
        );

        // Call the repository's create method
        boolean success = participationRepository.create(participation);

        // Show success or failure message
        if (success) {
            showAlert("Success", "Your participation has been successfully registered.");
            clearForm();  // Optionally clear the form after successful submission
            redirectToListParticipation();  // Redirect to ListParticipation page
        } else {
            showAlert("Error", "There was an issue registering your participation. Please try again.");
        }
    }

    // Redirect to ListParticipation page
    private void redirectToListParticipation() {
        if (submitButton == null) {
            showAlert("Error", "Internal error: submitButton is null.");
            return;
        }

        try {
            FXMLLoader loader = new FXMLLoader(getClass().getResource("/com.example.ewaste/views/ListParticipation-view.fxml"));
            Parent root = loader.load();
            Stage stage = (Stage) submitButton.getScene().getWindow();
            stage.setScene(new Scene(root));
            stage.show();
        } catch (Exception e) {
            e.printStackTrace();
            showAlert("Error", "Failed to load the participation list view.");
        }
    }

    // Handle Retour button action
    @FXML
    private void handleRetour() {
        try {
            // Charger le fichier FXML de l'interface ListEvenement
            FXMLLoader loader = new FXMLLoader(getClass().getResource("/com.example.ewaste/views/ListEvenement-view.fxml"));
            Parent root = loader.load();

            // Obtenir la scène actuelle à partir du bouton Retour
            Stage stage = (Stage) submitButton.getScene().getWindow();

            // Changer la scène pour afficher ListEvenement
            stage.setScene(new Scene(root));
            stage.show();
        } catch (IOException e) {
            e.printStackTrace();
            showAlert("Erreur", "Impossible de charger l'interface ListEvenement.");
        }
    }

    // Helper method to show alerts
    private void showAlert(String title, String message) {
        Alert alert = new Alert(Alert.AlertType.INFORMATION);
        alert.setTitle(title);
        alert.setHeaderText(null);
        alert.setContentText(message);
        alert.showAndWait();
    }

    // Optionally clear the form fields after successful submission
    private void clearForm() {
        firstNameField.clear();
        lastNameField.clear();
        emailField.clear();
        phoneField.clear();
        cityField.clear();
        countryField.clear();
        zipCodeField.clear();
    }
}